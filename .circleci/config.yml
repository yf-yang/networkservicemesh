version: 2
jobs:
  sanity-check:
    working_directory: /go/src/github.com/ligato/networkservicemesh
    docker:
      - image: circleci/golang:1.11
    steps:
      - checkout
      - run:
          command: |
            sudo apt-get install yamllint python3-pkg-resources
            ./.circleci/install-shellcheck.sh
      - run: yamllint -c .yamllint.yml $(git ls-files '*.yaml' '*.yml' | grep -v 'vendor/')
      - run: go version
      - run: make vet check dep-check
      - run: go install ./vendor/k8s.io/code-generator/cmd/deepcopy-gen/
      - run: go install ./vendor/github.com/golang/protobuf/protoc-gen-go/
      - run: go get golang.org/x/tools/cmd/stringer
      - run: ./scripts/install-protoc.sh
      # - run: PATH=${PATH}:~/bin go generate ./...; git diff --exit-code || (echo "Run go generate ./... and recommit. If that doesn't work make sure you have installed via 'go install ./vendor/github.com/golang/protobuf/protoc-gen-go/'";exit 1)
      - run: go build ./...

  build:
    working_directory: /go/src/github.com/ligato/networkservicemesh
    docker:
      - image: circleci/golang:1.10
    steps:
      - checkout
      - setup_remote_docker
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export BUILD_TAG="circle-${CIRCLE_BUILD_NUM}"
            export TAG="$BUILD_TAG"
            go install ./vendor/k8s.io/kube-openapi/cmd/openapi-gen
            make verify docker-build docker-push
      - run:
          when: on_fail
          name: Trigger packet-destroy
          command: |
            echo "Wait for 10 minutes to allow deploy to happen"
            typeset -i numsec=900
            typeset -i cnt=0
            while [ $cnt -lt ${numsec} ]; do
              echo -ne "Waited $cnt seconds out of $numsec\033[0K\r"
              ((cnt=cnt+1))
              sleep 1
            done
            curl --user ${CIRCLE_API_PROJECT_TOKEN}: \
                --data build_parameters[CIRCLE_JOB]=packet-destroy \
                --data build_parameters[CIRCLE_WORKFLOW_ID]=${CIRCLE_WORKFLOW_ID} \
                --data revision=$CIRCLE_SHA1 \
                https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH


  packet-deploy:
    docker:
      - image: circleci/golang:1.10
    steps:
      - checkout
      - run: pwd
      - run: ls
      - run: wget https://releases.hashicorp.com/terraform/0.11.10/terraform_0.11.10_linux_amd64.zip
      - run: unzip terraform_0.11.10_linux_amd64.zip
      - run: mv terraform /go/bin/
      - run: mkdir data
      - run: ssh-keygen -t rsa -f data/sshkey -q -N ""
      - run: ssh-add data/sshkey
      - run: .circleci/provision.sh
      - run: make packet-get-kubeconfig
      - run: cp kubeconfig data/
      - run: cp -a scripts/terraform/ data/
      - run:
          when: on_fail
          command: .circleci/destroy-cluster.sh
      - save_cache:
          key: cncf-data-{{.Environment.CIRCLE_WORKFLOW_ID}}
          paths:
            - data

  packet-integration-tests:
    working_directory: /go/src/github.com/ligato/networkservicemesh
    docker:
      - image: circleci/golang:1.10
    steps:
      - checkout
      - setup_remote_docker
      - run:
          command: |
            sudo ./.circleci/install-yq.sh
      - run:
          command: |
            ./.circleci/set-nameserver.sh sudo
            sudo apt-get install gettext-base
      - run:
          command: |
            sudo mkdir -p /cncf/data
            sudo chown -R circleci:circleci /cncf/
          name: Cache Prep
      - restore_cache:
          key: cncf-data-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - run:
          command: |
            ./scripts/circle-integration-tests.sh
            make k8s-check
          environment:
            KUBECONFIG: /home/circleci/project/data/kubeconfig
      - run:
          when: always
          name: Dump K8s state
          command: |
            kubectl get pods -o wide
            kubectl get nodes
            kubectl get nse
            kubectl get netsvc
            kubectl get nsm
          environment:
            KUBECONFIG: /home/circleci/project/data/kubeconfig
      - run:
          when: always
          name: Dump Logs - nsc
          command: make k8s-nsc-logs
          environment:
            KUBECONFIG: /home/circleci/project/data/kubeconfig
      - run:
          when: always
          name: Dump Logs - nsmd
          command: make k8s-nsmd-logs
          environment:
            KUBECONFIG: /home/circleci/project/data/kubeconfig
      - run:
          when: always
          name: Dump Logs - icmp-responder-nse
          command: make k8s-icmp-responder-nse-logs
          environment:
            KUBECONFIG: /home/circleci/project/data/kubeconfig
      - run:
          when: always
          name: Dump Logs - vppagent-dataplane
          command: make k8s-vppagent-dataplane-logs
          environment:
            KUBECONFIG: /home/circleci/project/data/kubeconfig
      - run:
          when: always
          name: Dump CrossConnect Monitor logs
          command: make k8s-crossconnect-monitor-logs
          environment:
            KUBECONFIG: /home/circleci/project/data/kubeconfig
      - run:
          when: on_fail
          name: Trigger packet-destroy
          command: |
            curl --user ${CIRCLE_API_PROJECT_TOKEN}: \
                --data build_parameters[CIRCLE_JOB]=packet-destroy \
                --data build_parameters[CIRCLE_WORKFLOW_ID]=${CIRCLE_WORKFLOW_ID} \
                --data revision=$CIRCLE_SHA1 \
                https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH


  packet-destroy:
    docker:
      - image: circleci/golang:1.10
    steps:
      - checkout
      - run:
          command: |
            sudo mkdir -p /cncf/data
            sudo chown -R circleci:circleci /cncf/
          name: Cache Prep
      - restore_cache:
          key: cncf-data-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - run: wget https://releases.hashicorp.com/terraform/0.11.10/terraform_0.11.10_linux_amd64.zip
      - run: unzip terraform_0.11.10_linux_amd64.zip
      - run: mv terraform /go/bin/
      - run: cp -a data/terraform/* ./scripts/terraform/
      - run: cd ./scripts/terraform && terraform init && cd ../..
      - run: .circleci/destroy-cluster.sh

  build-nsmd:
    working_directory: /go/src/github.com/ligato/networkservicemesh/
    docker:
      - image: circleci/golang:1.10
    steps:
      - checkout
      - setup_remote_docker
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export BUILD_TAG="circle-${CIRCLE_BUILD_NUM}"
            export TAG="$BUILD_TAG"
            make docker-nsmd-build
            make docker-nsmd-push
  build-nsmd-k8s:
    working_directory: /go/src/github.com/ligato/networkservicemesh/
    docker:
      - image: circleci/golang:1.10
    steps:
      - checkout
      - setup_remote_docker
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export BUILD_TAG="circle-${CIRCLE_BUILD_NUM}"
            export TAG="$BUILD_TAG"
            make docker-nsmd-k8s-build
            make docker-nsmd-k8s-push
  build-nsmdp:
    working_directory: /go/src/github.com/ligato/networkservicemesh/
    docker:
      - image: circleci/golang:1.10
    steps:
      - checkout
      - setup_remote_docker
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export BUILD_TAG="circle-${CIRCLE_BUILD_NUM}"
            export TAG="$BUILD_TAG"
            make docker-nsmdp-build
            make docker-nsmdp-push
  build-crossconnect-monitor:
    working_directory: /go/src/github.com/ligato/networkservicemesh/
    docker:
      - image: circleci/golang:1.10
    steps:
      - checkout
      - setup_remote_docker
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export BUILD_TAG="circle-${CIRCLE_BUILD_NUM}"
            export TAG="$BUILD_TAG"
            make docker-crossconnect-monitor-build
            make docker-crossconnect-monitor-push
  build-icmp-responder-nse:
    working_directory: /go/src/github.com/ligato/networkservicemesh/
    docker:
      - image: circleci/golang:1.10
    steps:
      - checkout
      - setup_remote_docker
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export BUILD_TAG="circle-${CIRCLE_BUILD_NUM}"
            export TAG="$BUILD_TAG"
            make docker-icmp-responder-nse-build
            make docker-icmp-responder-nse-push

  build-vppagent-icmp-responder-nse:
    working_directory: /go/src/github.com/ligato/networkservicemesh/
    docker:
      - image: circleci/golang:1.10
    steps:
      - checkout
      - setup_remote_docker
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export BUILD_TAG="circle-${CIRCLE_BUILD_NUM}"
            export TAG="$BUILD_TAG"
            make docker-vppagent-icmp-responder-nse-build
            make docker-vppagent-icmp-responder-nse-push

  build-nsc:
    working_directory: /go/src/github.com/ligato/networkservicemesh/
    docker:
      - image: circleci/golang:1.10
    steps:
      - checkout
      - setup_remote_docker
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export BUILD_TAG="circle-${CIRCLE_BUILD_NUM}"
            export TAG="$BUILD_TAG"
            make docker-nsc-build
            make docker-nsc-push
  build-vppagent-dataplane:
    working_directory: /go/src/github.com/ligato/networkservicemesh/
    docker:
      - image: circleci/golang:1.10
    steps:
      - checkout
      - setup_remote_docker
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export BUILD_TAG="circle-${CIRCLE_BUILD_NUM}"
            export TAG="$BUILD_TAG"
            make docker-vppagent-dataplane-build
            make docker-vppagent-dataplane-push
workflows:
  version: 2
  build-and-test:
    jobs:
      - sanity-check
      - build-nsmd:
          requires:
            - sanity-check
      - build-nsmd-k8s:
          requires:
            - sanity-check
      - build-crossconnect-monitor:
          requires:
            - sanity-check
      - build-nsmdp:
          requires:
            - sanity-check
      - build-icmp-responder-nse:
          requires:
            - sanity-check
      - build-vppagent-icmp-responder-nse:
          requires:
            - sanity-check
      - build-nsc:
          requires:
            - sanity-check
      - build-vppagent-dataplane:
          requires:
            - sanity-check
      - packet-deploy:
          requires:
            - sanity-check
      - packet-integration-tests:
          requires:
            - build-nsmd
            - build-nsmd-k8s
            - build-nsmdp
            - build-crossconnect-monitor
            - build-icmp-responder-nse
            - build-vppagent-icmp-responder-nse
            - build-nsc
            - packet-deploy
      - packet-destroy:
          requires:
            - packet-integration-tests
