// Code generated by protoc-gen-go. DO NOT EDIT.
// source: networkservice.proto

package networkservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import connection "github.com/ligato/networkservicemesh/controlplane/pkg/apis/remote/connection"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NetworkServiceRequest struct {
	Connection           *connection.Connection  `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
	MechanismPreferences []*connection.Mechanism `protobuf:"bytes,2,rep,name=mechanism_preferences,json=mechanismPreferences,proto3" json:"mechanism_preferences,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *NetworkServiceRequest) Reset()         { *m = NetworkServiceRequest{} }
func (m *NetworkServiceRequest) String() string { return proto.CompactTextString(m) }
func (*NetworkServiceRequest) ProtoMessage()    {}
func (*NetworkServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_networkservice_d4de7ff5f5769d53, []int{0}
}
func (m *NetworkServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkServiceRequest.Unmarshal(m, b)
}
func (m *NetworkServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkServiceRequest.Marshal(b, m, deterministic)
}
func (dst *NetworkServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkServiceRequest.Merge(dst, src)
}
func (m *NetworkServiceRequest) XXX_Size() int {
	return xxx_messageInfo_NetworkServiceRequest.Size(m)
}
func (m *NetworkServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkServiceRequest proto.InternalMessageInfo

func (m *NetworkServiceRequest) GetConnection() *connection.Connection {
	if m != nil {
		return m.Connection
	}
	return nil
}

func (m *NetworkServiceRequest) GetMechanismPreferences() []*connection.Mechanism {
	if m != nil {
		return m.MechanismPreferences
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkServiceRequest)(nil), "remote.networkservice.NetworkServiceRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetworkServiceClient is the client API for NetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkServiceClient interface {
	Request(ctx context.Context, in *NetworkServiceRequest, opts ...grpc.CallOption) (*connection.Connection, error)
	Close(ctx context.Context, in *connection.Connection, opts ...grpc.CallOption) (*empty.Empty, error)
}

type networkServiceClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServiceClient(cc *grpc.ClientConn) NetworkServiceClient {
	return &networkServiceClient{cc}
}

func (c *networkServiceClient) Request(ctx context.Context, in *NetworkServiceRequest, opts ...grpc.CallOption) (*connection.Connection, error) {
	out := new(connection.Connection)
	err := c.cc.Invoke(ctx, "/remote.networkservice.NetworkService/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) Close(ctx context.Context, in *connection.Connection, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/remote.networkservice.NetworkService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServiceServer is the server API for NetworkService service.
type NetworkServiceServer interface {
	Request(context.Context, *NetworkServiceRequest) (*connection.Connection, error)
	Close(context.Context, *connection.Connection) (*empty.Empty, error)
}

func RegisterNetworkServiceServer(s *grpc.Server, srv NetworkServiceServer) {
	s.RegisterService(&_NetworkService_serviceDesc, srv)
}

func _NetworkService_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.networkservice.NetworkService/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).Request(ctx, req.(*NetworkServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(connection.Connection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.networkservice.NetworkService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).Close(ctx, req.(*connection.Connection))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "remote.networkservice.NetworkService",
	HandlerType: (*NetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _NetworkService_Request_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _NetworkService_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "networkservice.proto",
}

func init() {
	proto.RegisterFile("networkservice.proto", fileDescriptor_networkservice_d4de7ff5f5769d53)
}

var fileDescriptor_networkservice_d4de7ff5f5769d53 = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0xcd, 0x4a, 0x03, 0x31,
	0x10, 0x66, 0x15, 0x15, 0x52, 0x28, 0x12, 0x5a, 0x29, 0x8b, 0x42, 0xf1, 0xd4, 0x83, 0x24, 0xd0,
	0x9e, 0xf5, 0x60, 0xf1, 0xa8, 0x68, 0x05, 0x0f, 0x82, 0xc8, 0x6e, 0x98, 0xa6, 0xa1, 0x49, 0x26,
	0x26, 0x59, 0xa5, 0x6f, 0xa4, 0x6f, 0x29, 0x6d, 0xfa, 0xb3, 0x0b, 0xa5, 0x97, 0x30, 0x30, 0xdf,
	0xef, 0x84, 0x74, 0x2c, 0xc4, 0x1f, 0xf4, 0xf3, 0x00, 0xfe, 0x5b, 0x09, 0x60, 0xce, 0x63, 0x44,
	0xda, 0xf5, 0x60, 0x30, 0x02, 0x6b, 0x2e, 0xf3, 0x0f, 0xa9, 0xe2, 0xac, 0x2a, 0x99, 0x40, 0xc3,
	0xb5, 0x92, 0x45, 0x44, 0xde, 0x44, 0x18, 0x08, 0x33, 0x2e, 0xd0, 0x46, 0x8f, 0xda, 0xe9, 0xc2,
	0x02, 0x77, 0x73, 0xc9, 0x0b, 0xa7, 0x02, 0x4f, 0x8a, 0xcb, 0xa5, 0x05, 0x11, 0x15, 0xda, 0xda,
	0x98, 0x5c, 0xf3, 0x51, 0x4d, 0x5e, 0xa2, 0x2e, 0xac, 0xe4, 0xab, 0x45, 0x59, 0x4d, 0xb9, 0x8b,
	0x0b, 0x07, 0x81, 0x83, 0x71, 0x71, 0x91, 0xde, 0x44, 0xba, 0xfe, 0xcb, 0x48, 0xf7, 0x29, 0x85,
	0x78, 0x4d, 0x21, 0x26, 0xf0, 0x55, 0x41, 0x88, 0xf4, 0x96, 0x90, 0x9d, 0x45, 0x2f, 0xeb, 0x67,
	0x83, 0xd6, 0xf0, 0x8a, 0xad, 0x9b, 0xd5, 0xcc, 0xc7, 0xdb, 0x71, 0x52, 0x23, 0xd0, 0x17, 0xd2,
	0x35, 0x20, 0x66, 0x85, 0x55, 0xc1, 0x7c, 0x3a, 0x0f, 0x53, 0xf0, 0x60, 0x05, 0x84, 0xde, 0x51,
	0xff, 0x78, 0xd0, 0x1a, 0x5e, 0xee, 0x51, 0x7a, 0xdc, 0xe0, 0x27, 0x9d, 0x2d, 0xf5, 0x79, 0xc7,
	0x1c, 0xfe, 0x66, 0xa4, 0xdd, 0xcc, 0x4a, 0xdf, 0xc8, 0xd9, 0x26, 0xef, 0x0d, 0xdb, 0x7b, 0x75,
	0xb6, 0xb7, 0x5d, 0x7e, 0xb8, 0x09, 0xbd, 0x23, 0x27, 0x63, 0x8d, 0x01, 0xe8, 0x61, 0x5c, 0x7e,
	0xc1, 0x24, 0xa2, 0xd4, 0xeb, 0x8f, 0x2f, 0xab, 0x29, 0x7b, 0x58, 0x1e, 0xf7, 0xfe, 0xfc, 0xbd,
	0xdd, 0x8c, 0x51, 0x9e, 0xae, 0x10, 0xa3, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb3, 0xb6, 0x82,
	0xd2, 0x32, 0x02, 0x00, 0x00,
}
